def stream_pipeline(source):
    def updateFunc(new_values, running_tuple):
        new_sum = [field[0] * field[1] for field in new_values]
        new_count = [field[1] for field in new_values]

        if not running_tuple:
            running_avg = 0
            running_count = 0
        else:
            running_avg, running_count = running_tuple

        running_sum = running_avg * running_count
        update_sum = sum(new_sum, running_sum)
        update_count = sum(new_count, running_count)
        update_avg = update_sum / update_count
        return update_avg, update_count

    target = (
        source.map(lambda x: (x.split(",")[2], float(x.split(",")[3])))
        .mapValues(lambda x: (x, 1))
        .reduceByKey(lambda a, b: (a[0] + b[0], a[1] + b[1]))
        .mapValues(lambda x: (x[0] / x[1], x[1]))
        .updateStateByKey(updateFunc)
    )
    return target

